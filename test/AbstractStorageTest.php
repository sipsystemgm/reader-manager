<?php

namespace Sip\ReaderManager\Test;

use PHPUnit\Framework\TestCase;
use Sip\ReaderManager\Interfaces\ReaderStorageInterface;

abstract class AbstractStorageTest extends TestCase
{
    private ReaderStorageInterface $storage;
    private string $testUrl = 'some-url.com';

    public function testClear(): void
    {
        $this->storage->clear();
        $this->assertEquals($this->storage->getCurrentDeep(), 0);
        $this->assertEquals($this->storage->getSavedLength(), 0);
        $this->assertEmpty($this->storage->getUrls());
    }

    public function testGetCurrentDeep()
    {
        $this->storage->setCurrentDeep(1);
        $this->assertEquals(1, $this->storage->getCurrentDeep());
    }

    public function testIsUrlLoaded()
    {
        $this->assertFalse($this->storage->isUrlLoaded($this->testUrl));
    }

    public function testAddUrls()
    {
        $this->storage->addUrls([$this->testUrl]);
        $this->assertTrue($this->storage->isUrlLoaded($this->testUrl));
    }

    public function testGetSavedLength()
    {
        $savedLength = $this->storage->getSavedLength();
        $this->storage->saveLength();
        $this->assertEquals($savedLength + 1, $this->storage->getSavedLength());
    }

    public function testSetCurrentDeep()
    {
        $deep = $this->storage->getCurrentDeep();
        $this->storage->setCurrentDeep($deep + 1);
        $this->assertEquals($deep + 1, $this->storage->getCurrentDeep());
    }

    public function testSaveLength()
    {
        $savedLength = $this->storage->getSavedLength();
        $this->storage->saveLength();
        $this->assertEquals($savedLength + 1, $this->storage->getSavedLength());
    }

    public function testSave(): void
    {
        $urls = ['one.com', 'two.com'];
        $this->storage->clear();
        $this
            ->storage
            ->setCurrentDeep(1)
            ->saveLength()
            ->addUrls($urls);

        $this->storage->save();
        $storage = clone $this->getStorage();

        $this->assertEquals(1, $storage->getCurrentDeep());
        $this->assertEquals(1, $storage->getSavedLength());
        $this->assertEquals($urls, $storage->getUrls());
    }

    abstract protected function getStorage(): ReaderStorageInterface;

    protected function setUp(): void
    {
        $this->storage = $this->getStorage();
        parent::setUp(); // TODO: Change the autogenerated stub
    }


}